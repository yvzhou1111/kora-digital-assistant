@import './variables.scss';

// Flexbox mixins
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin flex-between {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

// Typography mixins
@mixin font-size($size, $weight: normal, $line-height: 1.5) {
  font-size: $size;
  font-weight: $weight;
  line-height: $line-height;
}

@mixin heading-1 {
  font-size: $font-heading;
  font-weight: 600;
  line-height: 1.2;
  margin-bottom: $spacing-md;
}

@mixin heading-2 {
  font-size: $font-xxl;
  font-weight: 600;
  line-height: 1.25;
  margin-bottom: $spacing-md;
}

@mixin heading-3 {
  font-size: $font-xl;
  font-weight: 600;
  line-height: 1.3;
  margin-bottom: $spacing-sm;
}

// Responsive mixins
@mixin responsive($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: $breakpoint-xs) {
      @content;
    }
  } @else if $breakpoint == sm {
    @media (max-width: $breakpoint-sm) {
      @content;
    }
  } @else if $breakpoint == md {
    @media (max-width: $breakpoint-md) {
      @content;
    }
  } @else if $breakpoint == lg {
    @media (max-width: $breakpoint-lg) {
      @content;
    }
  } @else if $breakpoint == xl {
    @media (max-width: $breakpoint-xl) {
      @content;
    }
  }
}

// Box shadow mixins
@mixin shadow-sm {
  box-shadow: $shadow-sm;
}

@mixin shadow-md {
  box-shadow: $shadow-md;
}

@mixin shadow-lg {
  box-shadow: $shadow-lg;
}

// Card mixins
@mixin card {
  background-color: $white-color;
  border-radius: $border-radius-md;
  box-shadow: $shadow-sm;
  padding: $spacing-lg;
  transition: box-shadow $transition-normal;
  
  &:hover {
    box-shadow: $shadow-md;
  }
}

// Button mixins
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: $border-radius-sm;
  padding: $spacing-xs $spacing-md;
  font-size: $font-sm;
  font-weight: 500;
  cursor: pointer;
  transition: all $transition-fast;
}

@mixin button-primary {
  @include button-base;
  background-color: $primary-color;
  color: $white-color;
  border: none;
  
  &:hover {
    background-color: darken($primary-color, 10%);
  }
  
  &:disabled {
    background-color: lighten($primary-color, 20%);
    cursor: not-allowed;
  }
}

@mixin button-secondary {
  @include button-base;
  background-color: transparent;
  color: $primary-color;
  border: 1px solid $primary-color;
  
  &:hover {
    background-color: rgba($primary-color, 0.1);
  }
  
  &:disabled {
    color: lighten($primary-color, 20%);
    border-color: lighten($primary-color, 20%);
    cursor: not-allowed;
  }
}

// Gradient mixins
@mixin gradient-primary {
  background: linear-gradient(135deg, $primary-color, $accent-color);
}

@mixin gradient-secondary {
  background: linear-gradient(135deg, $secondary-color, $primary-color);
}

// Animation mixins
@mixin fade-in($duration: 0.5s, $delay: 0s) {
  animation: fadeIn $duration ease-in $delay forwards;
  
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
}

@mixin slide-in($direction: 'up', $distance: 20px, $duration: 0.5s, $delay: 0s) {
  @if $direction == 'up' {
    animation: slideInUp $duration ease-out $delay forwards;
    
    @keyframes slideInUp {
      from {
        transform: translateY($distance);
        opacity: 0;
      }
      to {
        transform: translateY(0);
        opacity: 1;
      }
    }
  } @else if $direction == 'down' {
    animation: slideInDown $duration ease-out $delay forwards;
    
    @keyframes slideInDown {
      from {
        transform: translateY(-$distance);
        opacity: 0;
      }
      to {
        transform: translateY(0);
        opacity: 1;
      }
    }
  } @else if $direction == 'left' {
    animation: slideInLeft $duration ease-out $delay forwards;
    
    @keyframes slideInLeft {
      from {
        transform: translateX(-$distance);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }
  } @else if $direction == 'right' {
    animation: slideInRight $duration ease-out $delay forwards;
    
    @keyframes slideInRight {
      from {
        transform: translateX($distance);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }
  }
}

// Truncate text
@mixin truncate($lines: 1) {
  @if $lines == 1 {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }
}

// Create a glass effect (glassmorphism)
@mixin glass-effect($opacity: 0.1) {
  background: rgba($white-color, $opacity);
  backdrop-filter: blur(10px);
  border: 1px solid rgba($white-color, 0.2);
  border-radius: $border-radius-md;
} 